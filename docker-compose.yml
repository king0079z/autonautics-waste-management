# docker-compose.yml - Docker Compose configuration for Waste Management System

version: '3.8'

services:
  # Web Application
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: waste-management-app
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - API_URL=http://api:3000
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - webapp-data:/usr/share/nginx/html
    networks:
      - waste-network
    restart: unless-stopped
    depends_on:
      - api

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: waste-management-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_TYPE=postgresql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=waste_management_prod
      - DB_USERNAME=waste_admin
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret-key}
      - JWT_SECRET=${JWT_SECRET:-change-this-jwt-secret}
      - MAP_API_KEY=${MAP_API_KEY:-}
    volumes:
      - api-data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - waste-network
    restart: unless-stopped
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: waste-management-db
    environment:
      - POSTGRES_DB=waste_management_prod
      - POSTGRES_USER=waste_admin
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    networks:
      - waste-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waste_admin -d waste_management_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: waste-management-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis-data:/data
    networks:
      - waste-network
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: waste-management-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - waste-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: waste-management-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - waste-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: waste-management-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - waste-network
    depends_on:
      - webapp
      - api
    restart: unless-stopped

networks:
  waste-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  webapp-data:
    driver: local
  api-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local